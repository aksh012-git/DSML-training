# -*- coding: utf-8 -*-
"""DSMLPractical_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MH9tL_or-975x1QaOCKPWCtPKI0iHEhO
"""

import pandas as pd

df = pd.read_excel('Covid cases in India.xlsx')
df
#if you wish to read .tsv file than pd.read_csv('dataset.tsv', delimiter = '\t') 
#tsv file mean "tab separated values file"
#csv file mean "comma-separated values file"

#in "Covid cases in India.xlsx" file tow sheets are available
#you want to open separated sheet then follow this
df1 = pd.read_excel('Covid cases in India.xlsx',sheet_name='Sheet2')
df1

df.columns

df.columns[1:4]

df.Active[1:6]

df[['Active','Recovered']][3:10]

#you can also use this oparetion for display column
df[df.columns[1:3]][2:10]

df.shape

new_df = df
new_df.shape

new_df = df[10:19]
new_df

#find particular row and column as o/p
df.loc[0,'Active']

df.loc[1:5,'Active']

#find >500 active cases
df['Active'] > 500

df.loc[df['Active']>500]

#find >500 active cases and print there states and deaths only
df.loc[df['Active']>500,['Name of State / UT','Active','Deaths']]

df.loc[df['Active']>500][['Name of State / UT','Active','Deaths']]

#you can find by index locations and print same things you use iloc
df.iloc[(df['Active']>500).values,[1,3,5]]

#in this input [1,3,5] is column location

#you can use multile query with &(and) 
df.iloc[(df['Active']>500).values & (df['Deaths']>100).values,[1,3,5]]

#you want to print all column then perform df.iloc[(df['Active']>500).values & (df['Deaths']>100).values]

##you can use multile query with | (or)
df.iloc[(df['Active']>500).values | (df['Deaths']>100).values,[1,3,5]]

#disply 6 states with maximum deaths
df.sort_values('Deaths',ascending=False).head(6)

#you can also use for disply 6 states with maximum deaths
df.nlargest(6,'Deaths')

#disply 6 states with minimum deaths
df.sort_values('Deaths').head(6)

#you can also use for disply 6 states with minimum deaths
df.nsmallest(6,'Deaths')

#0 Deaths of states
df.iloc[(df['Deaths']==0).values,[1,5]].reset_index()

#you write frac = 0.5 then 50% dataset print random (frac= fraction)
df.sample(frac = 0.5)

#find out total of total confirmed cases of all states
df['TotalConfirmedCases'].sum()

#but at that time toal also included

#in this case total is rigth bcz i choose 0 to 32 row in df
df['TotalConfirmedCases'][:-1].sum()

#delete column and use axis = 1 for column 
df.drop('TotalConfirmedCases',axis=1)

#you can use "df.drop('TotalConfirmedCases',axis=1,inplace = True)" than changes are permanently sotre in df

#delete row and use axis = 0 for row
df.drop([0,2,4,6,8,10],axis=0)

#delete single row then use "df.drop(1,axis=0)"

#create new column and add
df['Total_cases'] = df['Active'] + df['Recovered'] + df['Deaths']
df

#you can perform any kind of mathematical calculation useing "numpy" library
import numpy as np

#i am create new copy of my data set
new_df = df

#you can remove value from new_df
new_df.iloc[1,2] = np.NaN
new_df.head()

#count NaN value
new_df.isnull().sum()

#remove NaN row in new_df
new_df = new_df.dropna()
new_df

#in our case 1 row and 33th row are removed because in this row NaN value are occur

#reset index 
new_df.reset_index(inplace=True , drop=True)
new_df.head()

#use drop for remove old index and use inplace for permanently change your new_df

new_df1 = df
new_df1.iloc[1:5,2] = np.NaN
new_df1.head(7)

#fill NaN value with forward value
new_df1.fillna(method='ffill').head(7)

#fill NaN value with backward value
new_df1.fillna(method='bfill').head(7)

#NaN replace with "mean" value 
new_df1.fillna(value=new_df1.mean()).head(7)

#you can change type of any column
new_df1['Active'].astype(float).head(5)

#you can see your df in graphical manner then use "matplotlib"
#you want to add more feature in graphical manner then use "seaborn" library 
#seaborn is next leavel or updated version of matplotlib
df1 = pd.read_excel('Covid cases in India.xlsx')

import matplotlib.pyplot as plt
import seaborn as sns

#see graph of Active cases with there states
sns.barplot(x='Name of State / UT',y='Active',data=df1)

df1

#you can increase you figure size
plt.figure(figsize=(16,8))
#in this df1 i write df1[:-1] for ignore total
sns.barplot(x='Name of State / UT',y='Active',data=df1[:-1])
#add xticks for some changes in x-axis and add rotation for rotat your value and you use "" horizontalalignment='right' "" for see well formate
plt.xticks(rotation=80,horizontalalignment='right',fontweight='light',fontsize='x-large')
plt.show()
#you can use "plt.savefig('myplot.png')"

#you can increase you figure size
plt.figure(figsize=(16,8))
#in this df1 i write df1[:-1] for ignore total
sns.barplot(x='Name of State / UT',y='Active',data=df1[:-1])
#add xticks for some changes in x-axis and add rotation for rotat your value and you use "" horizontalalignment='left' "" for see well formate
plt.xticks(rotation=-80,horizontalalignment='left',fontweight='light',fontsize='x-large')
plt.show()

#---------stripplot---------------------
#you can increase you figure size
plt.figure(figsize=(16,8))
#in this df1 i write df1[:-1] for ignore total
sns.stripplot(x='Name of State / UT',y='Active',data=df1[:-1])
#add xticks for some changes in x-axis and add rotation for rotat your value and you use "" horizontalalignment='right' "" for see well formate
plt.xticks(rotation=80,horizontalalignment='right',fontweight='light',fontsize='x-large')
plt.show()

#overlab some values
plt.figure(figsize=(16,8))
sns.barplot(x='Active',y='Name of State / UT',data=df1[:-1],color='lightgreen',label='Active cases')
sns.barplot(x='Recovered',y='Name of State / UT',data=df1[:-1],color='blue',label='Recovered cases')
sns.barplot(x='Deaths',y='Name of State / UT',data=df1[:-1],color='red',label='Death')
#add legend for see your lable and add location of legend
plt.legend(loc='lower right')
plt.show()

