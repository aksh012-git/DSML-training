# -*- coding: utf-8 -*-
"""DSMLpractical_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uSYefQb_suOhLhmk-zjmSGac-aEBpQYe

in machine learing classify---->>

1) supervised learning --> whenever you knowledge about dataset then to have label dataset available with you, 
                           means a column title available with you,than this is supervised learning
                           two method ---> 1)Regression  2)Classification

2)unsupervised learning --> whenever you knowledge about dataset then to have label dataset is not available, 
                            means proper information is not available or column title is not there then is unsupervised learning

3)semi-supervised learning
4)renforcement learning


your dataset value categorize in tow part--->>

1)continuous set of values ---> in this dataset value is not a limited, Ex-> your of experience and salary 
2)discrete set of values ---> in this datset alue is limited output, Ex-> man purchase Audi car or not then only output 'Yes' or 'No'

-your value "Continuous set of value" then you can use "Regression"
-your value "discrete set of values" then you can use "Classification" 


Many Type of regression are available--->>
1)simple Linear regression - in dataset one Input and one Output then you follow SLR , https://www.youtube.com/watch?v=Ni5QwU-xaUs
2)multi Linear regression - in dataset Many I/p and one O/p then you follow MLR
3)ploynomial regression,etc 


y = mx + c

y = Dependent variable(output)
x = Independent variable(input)
m = slop
c = y-intercept
"""

#--------------------------------------------------------------------------------------------------------------
#to read our dataset
import pandas as pd
dataset3 = pd.read_csv('dataset3.csv')

#--------------------------------------------------------------------------------------------------------------
dataset3.head()
dataset3.shape
dataset3.info()

#in this dataset no missing value


#--------------------------------------------------------------------------------------------------------------
#split dataset3 into I/p and O/p
#x is input
x = dataset3.iloc[:,:1].values
x

#y is output
y = dataset3.iloc[:,1].values
y


#--------------------------------------------------------------------------------------------------------------
#spliting datset3 into traing and testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=1/3,random_state=0)

x_train

x_test

y_train

y_test


#--------------------------------------------------------------------------------------------------------------
#for simple linear regression
from sklearn.linear_model import LinearRegression

#make machine learning model
regeressor = LinearRegression()
#ML model is empty at that time 

#you want to train your ML model than fit 
regeressor.fit(x_train,y_train)


#--------------------------------------------------------------------------------------------------------------
#predicting the test result
y_pred = regeressor.predict(x_test)
y_pred

#see and  y_pred and y_test

y_pred1 = regeressor.predict([[4]])
y_pred1

#see i writ 4 in 2d array bcz our train and test data is 2d array

y_pred1 = regeressor.predict([[7]])
y_pred1


#--------------------------------------------------------------------------------------------------------------
#you can seee your accuracy ,how well your dataset train or test
regeressor.score(x_train,y_train)

regeressor.score(x_test,y_test)


#--------------------------------------------------------------------------------------------------------------
import matplotlib.pyplot as plt

#plot your data and see simple linear regression
#see what your predict value line and your train data
#scatter means doted graph
plt.scatter(x_train,y_train,color='red')
#see your predicted line in traing dataset
plt.plot(x_train,regeressor.predict(x_train),color='blue')
plt.xlabel('Year of experience')
plt.ylabel('Salary')
plt.title('Salary vs Experience(Training set)')

#you can use plt.savefig('myplot.png') for save your graph in png file

#you write regeressor.predict(y_train) in plt.plot(x_train,regeressor.predict(x_train),color='blue') than error will be occure bcz our y_train data is 1d array
#so you can reshape y_train also
"""
import numpy as np
y_train = np.array(y_train)
y_train = y_train.reshape((20,1))
y_train
"""



#--------------------------------------------------------------------------------------------------------------
#plot your data and see simple linear regression
#see what your predict value line and your train data
#scatter means doted graph
plt.scatter(x_test,y_test,color='red')
#see your predicted line in traing dataset
plt.plot(x_test,regeressor.predict(x_test),color='blue')
plt.xlabel('Year of experience')
plt.ylabel('Salary')
plt.title('Salary vs Experience(Testing set)')
plt.savefig('myplot.png')

#how to save or dump your accuracy model 
#use library


#--------------------------------------------------------------------------------------------------------------
import pickle
from sklearn.externals import joblib
#save your model in .plk file
#joblib.dump(model_name,'filename.pkl')
joblib.dump(regeressor,'1_myregressor.pkl')


#--------------------------------------------------------------------------------------------------------------
#read or load pkl file
my_pkl_file = joblib.load('1_myregressor.pkl')

y_pred = my_pkl_file.predict([[7]])
y_pred

y_pred = my_pkl_file.predict(x_test)
y_pred

y_pred = my_pkl_file.predict(x_train)
y_pred