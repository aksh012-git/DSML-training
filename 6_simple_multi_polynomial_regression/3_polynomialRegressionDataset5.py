# -*- coding: utf-8 -*-
"""DSMLPractical_3_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HM58kOOkfvk8FRr2xz-dilNe8wGGCv7N
"""

import pandas as pd
dataset5 = pd.read_csv('dataset5.csv')


#---------------------------------------------------------------------------------------------------------------
#see dataset5 then you have to give position and level
#so you can neglect position bcz level is also there
x = dataset5.iloc[:,1:2].values
y = dataset5.iloc[:,-1].values

x

y


#---------------------------------------------------------------------------------------------------------------
#my dataset is very small so i not split to traing and testing part
#for simple linear regression
from sklearn.linear_model import LinearRegression

#make machine learning model
regeressor = LinearRegression()
#ML model is empty at that time 

#you want to train your ML model than fit 
regeressor.fit(x,y)


#---------------------------------------------------------------------------------------------------------------
#see accurasy
regeressor.score(x, y)


#---------------------------------------------------------------------------------------------------------------
import matplotlib.pyplot as plt

plt.scatter(x,y,color='red')
plt.plot(x,regeressor.predict(x),color='blue')
plt.xlabel('level')
plt.ylabel('Salary')
plt.title('Salary vs level')
plt.savefig('myfig.png')


#---------------------------------------------------------------------------------------------------------------
#you can see in graph regression line is not touch or can't be pass all the points
#so we can use polynomial regression
#in plolynomial regression "degree" is there
"""
Ex - degree = 2
then y = m1 x^0 + m2 x^1 + m3 x^2 +c

Ex - degree = 4
then y = m1 x^0 + m2 x^1 + m3 x^2 + m4 x^3 + m5 x^4 + c

Ex - degree = 3
then y = m1 x1^0 + m2 x2^1 + m3 x3^2 + m4 x4^3 + m5 x1 x2 + m6 x1^2 x3 + m7 x2 x3 x4 + c
but see all m1...m7 -->>> x degree is 3 or <3
"""


#---------------------------------------------------------------------------------------------------------------
#apply PolynomialFeatures for better accuracy 
from sklearn.preprocessing import PolynomialFeatures
#add polynomial feature
ploy_reg = PolynomialFeatures(degree = 5)
#fit our x data to polynomial feature
ploy_x = ploy_reg.fit_transform(x)


#---------------------------------------------------------------------------------------------------------------
#add our ploy_x to linear regression
regeressor.fit(ploy_x,y)


#---------------------------------------------------------------------------------------------------------------
plt.scatter(x,y,color='red')
plt.plot(x,regeressor.predict(ploy_x),color='blue')
plt.xlabel('level')
plt.ylabel('Salary')
plt.title('Salary vs level')
plt.savefig('myfig.png')


#you can aplly degree as per your need


#---------------------------------------------------------------------------------------------------------------
regeressor.predict(ploy_x)

regeressor.score(ploy_x,y)

regeressor.predict(ploy_reg.fit_transform([[6.5]]))